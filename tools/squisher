#!/bin/bash
#
# Squish a Vanir otapackage for distribution
# credit for original version: CM
#

export ANDROID_BUILD_TOP=$ANDROID_BUILD_TOP

. $ANDROID_BUILD_TOP/vendor/vanir/tools/functions

if [ -z "$OUT" -o ! -d "$OUT" ]; then
    echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
    exit 1
fi

OTAPACKAGE=$OTA_PACKAGE_PATH

if [ ! -f "$OTAPACKAGE" ]; then
    echo -e $CL_RED"$OTAPACKAGE doesn't exist!"$CL_RST;
    exit 1
fi

QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"

# Some products want a squashfs for xbin for space
case "$TARGET_PRODUCT" in
    cyanogen_dream_sapphire) WANT_SQUASHFS=1 ;;
    *) WANT_SQUASHFS=0 ;;
esac

if [ "$WANT_SQUASHFS" -eq 1 ]; then
    fatal=0
    MKSQUASHFS_VER_REQ=4
    if type mksquashfs >/dev/null 2>&1; then
        if mksquashfs -version | grep -q "version $MKSQUASHFS_VER_REQ"; then :; else
            echo
            echo "ERROR: mksquashfs must be at least version $MKSQUASHFS_VER_REQ for this build."
                fatal=1
            fi
        else
            echo
            echo "ERROR: $TARGET_PRODUCT requires mksquashfs."
            fatal=1
        fi

        if [ "$fatal" -ne 0 ]; then
            echo
            echo "       Unoptimized package is still available at"
            echo "         $OTAPACKAGE"
            exit $fatal
        fi
fi

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo

# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
ln -s  $OUT/data $REPACK/ota/data
echo

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
ln -s $REPACK/ota/system/framework/framework-res.apk .
for x in $REPACK/ota/system/app/*.apk; do ln -s $x .; done

find ./ -name \*.apk | $HALFXARGS schedtool -B -n 1 -e ionice -n 1 $OPTICHARGER

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# move utilities
[ -e $OUT/utilities ] && cp $OUT/utilities/* $REPACK/ota/system/xbin/

if [ "$WANT_SQUASHFS" -eq 1 ]; then
    squash_opts="-force-uid 1000 -force-gid 1000 -no-progress -noappend -no-exports -no-recovery"
    updater=$REPACK/ota/META-INF/com/google/android/updater-script

    # Relocate su
    cp -a $REPACK/ota/system/xbin $REPACK/_xbin/
    rm -f $REPACK/_xbin/su $REPACK/ota/system/bin/su
    mv $REPACK/ota/system/xbin/su $REPACK/ota/system/bin/su
    chmod -R 555 $REPACK/_xbin/*

    # Create symlinks for su and busybox (since updater-script can't work on the squashfs filesystem).
    # Forgive me for the regex hell here.
    ln -s ../bin/su $REPACK/_xbin/su
    for link in `sed -n -e's/,//g' -e'/symlink(.*busybox/,/xbin.*);/p' $updater | tr '"' '\n' | sed -n -e'\,/system/xbin/,s,/system/xbin/,,p'`
    do
        ln -s busybox $REPACK/_xbin/$link
    done

    # Create the squashfs with new and improved symlinkage!
    mksquashfs $REPACK/_xbin/* $REPACK/_xbin.sqf $squash_opts
    rm -rf $REPACK/ota/system/xbin/*
    mv $REPACK/_xbin.sqf $REPACK/ota/system/xbin/xbin.sqf
    chmod 444 $REPACK/ota/system/xbin/xbin.sqf

    # Remove xbin stuff and fix up updater-script
    $SED -i -e's,system/xbin/su,system/bin/su,g' -e'/xbin/d' $updater
fi

# Determine what to name the new signed package
MODVERSION=`sed -n -e'/ro\.modversion/s/^.*=//p' $REPACK/ota/system/build.prop`
OUTVERSION="$TARGET_PRODUCT"_"$MODVERSION"
OUTFILE=$OUT/$OUTVERSION.zip

# Pack it up and sign
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo
printf "Signing package..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx2048m \
    -jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar \
    -w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
    $REPACK/update.zip $OUTFILE
echo
printf "Cleaning up..."
rm -rf $REPACK
echo

# Create a md5 checksum image of the repacked package
(
echo -e ""
echo -e ""
echo -e $CL_GRN"================  "$CL_RST OTA package information $CL_GRN"  ================"$CL_RST
echo -e ""
echo -e $CL_BLU"Product name:"$CL_RST $OTAPACKAGE

img=`basename $OUTFILE`
cd `dirname $OUTFILE`
STRING=$OTA_PACKAGE_PATH
OTASIZE=`ls -lah $STRING | awk '{ print $5}' `
echo -e $CL_BLU"Package Size: "$CL_YLW "$OTASIZE" $CL_RST
echo -e $CL_BLU"Target Location: " $CL_RST
echo -e $CL_YLW"$OTA_PACKAGE_PATH" $CL_RST
echo ""

$MD5 $img >$img.md5
ZIPSIZE=`ls -lah $OUTFILE | awk '{ print $5}' `
echo -e $CL_GRN"================"$CL_RST $TARGET_PRODUCT-$TARGET_BUILD_VARIANT: $CL_RED"completed"$CL_RST $CL_GRN"================"$CL_RST
echo ""
echo -e $CL_BLU"Product name:"$CL_RST $OUTVERSION.zip
echo -e $CL_BLU"Package Size: "$CL_YLW"$ZIPSIZE     "
echo -e $CL_BLU"md5:"$CL_RST $CL_YLW" $(cat $img.md5 | awk '{ print $1 }')"$CL_RST
echo -e $CL_BLU"Target location:"$CL_RST
echo -e $CL_YLW $OUTFILE $CL_RST
echo ""
echo ""
)

exit 0
